USE [VBM]
GO

/****** Object:  Trigger [dbo].[TR_AFT_U_AUDIT_ASSIGNMENT]    Script Date: 08/12/2014 16:46:24 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_ASSIGNMENT] ON [dbo].[ASSIGNMENT]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  ASSIGNMENT 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    ASSIGNMENT AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_ASSIGNMENT '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO


/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COLLECTIONS_FACT] ON [dbo].[COLLECTIONS_FACT]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COLLECTIONS_FACT 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COLLECTIONS_FACT AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COLLECTIONS_FACT '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COLLECTIONS_PLAN] ON [dbo].[COLLECTIONS_PLAN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COLLECTIONS_PLAN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COLLECTIONS_PLAN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COLLECTIONS_PLAN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COLLECTIONS_PRED] ON [dbo].[COLLECTIONS_PRED]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COLLECTIONS_PRED 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COLLECTIONS_PRED AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY] AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COLLECTIONS_PRED '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COSTS_OPER] ON [dbo].[COSTS_OPER]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COSTS_OPER 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COSTS_OPER AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COSTS_OPER '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COSTS_OPER_PLAN] ON [dbo].[COSTS_OPER_PLAN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COSTS_OPER_PLAN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COSTS_OPER_PLAN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COSTS_OPER_PLAN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  


GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COSTS_OPER_PLAN_MARGIN] ON [dbo].[COSTS_OPER_PLAN_MARGIN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COSTS_OPER_PLAN_MARGIN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COSTS_OPER_PLAN_MARGIN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[DATE_LOAD] = A.[DATE_LOAD]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COSTS_OPER_PLAN_MARGIN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  


GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COSTS_OTHER] ON [dbo].[COSTS_OTHER]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COSTS_OTHER 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COSTS_OTHER AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COSTS_OTHER '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_COSTS_PCT] ON [dbo].[COSTS_PCT]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  COSTS_PCT 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    COSTS_PCT AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[DATE_LOAD] = A.[DATE_LOAD]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_COSTS_PCT '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_NPV_FACT] ON [dbo].[NPV_FACT]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  NPV_FACT 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    NPV_FACT AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] AND I.[DATE_LOAD] = A.[DATE_LOAD] --AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_NPV_FACT '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_NPV_PLAN] ON [dbo].[NPV_PLAN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  NPV_PLAN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    NPV_PLAN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[DATE_LOAD] = A.[DATE_LOAD] --AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_NPV_PLAN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_PORTFOLIOS] ON [dbo].[PORTFOLIOS]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  PORTFOLIOS 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    PORTFOLIOS AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] --AND I.[PERIOD] = A.[PERIOD] --AND I.[CATEGORY] = A.[CATEGORY]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_PORTFOLIOS '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_PROFIT_OPER_PLAN] ON [dbo].[PROFIT_OPER_PLAN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  PROFIT_OPER_PLAN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    PROFIT_OPER_PLAN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[CATEGORY] = A.[CATEGORY] AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_PROFIT_OPER_PLAN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_TAXES_FACT] ON [dbo].[TAXES_FACT]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  TAXES_FACT 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    TAXES_FACT AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[CATEGORY] = A.[CATEGORY] AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_TAXES_FACT '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_TAXES_PRED] ON [dbo].[TAXES_PRED]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  TAXES_PRED 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    TAXES_PRED AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[CATEGORY] = A.[CATEGORY] AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_TAXES_PRED '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO

/*-Updates the UPDATED_BY & DATE_UPDATED fields when updates occur--*/ 
CREATE TRIGGER [dbo].[TR_AFT_U_AUDIT_EBITDA_PLAN] ON [dbo].[EBITDA_PLAN]
  FOR UPDATE
  NOT FOR REPLICATION
AS
  BEGIN
    DECLARE @errMsg NVARCHAR(2000) 
    SET XACT_ABORT ON ;
    BEGIN TRY 
      BEGIN TRANSACTION
      SET NOCOUNT ON
      SET ANSI_NULLS ON

      UPDATE  EBITDA_PLAN 
      SET     UPDATED_BY = SYSTEM_USER ,
              DATE_UPDATED = GETDATE()
      FROM    EBITDA_PLAN AS A 
              INNER JOIN INSERTED I
                ON I.[ID_PORTFOLIO] = A.[ID_PORTFOLIO] AND I.[PERIOD] = A.[PERIOD] --AND I.[CATEGORY] = A.[CATEGORY] AND I.[VERSION] = A.[VERSION]
      SET NOCOUNT OFF
      COMMIT 
    END TRY
  
    BEGIN CATCH
      IF @@TRANCOUNT > 0 
        ROLLBACK 
      SELECT  @errMsg = 'TR_AFT_U_AUDIT_EBITDA_PLAN '+ERROR_MESSAGE() 
      RAISERROR (@errMsg, 16,1) 
    END CATCH              
  END  

GO